package gm

import (
	"github.com/hyperchain/gosdk/common"
	"math/big"
	"testing"
)

func TestGetPubFromPriv(t *testing.T) {
	pri, _ := GetPriFromHex("81EB26E941BB5AF16DF116495F90695272AE2CD63D6C4AE1678418BE48230029")
	pub := GetPubFromPriv(pri)
	t.Log("PubLength", len(pub))
	t.Log("Pub", pub)
}

func TestGetKeyPareFromHex(t *testing.T) {
	key, err := GetKeyPareFromHex("81EB26E941BB5AF16DF116495F90695272AE2CD63D6C4AE1678418BE48230029", "03160e12897df4edb61dd812feb96748fbd3ccf4ffe26aa6f6db9540af49c94232")
	if err != nil {
		t.Error(err)
		return
	}
	x := common.ToHex(key.RawPuk)[4:68]
	y := common.ToHex(key.RawPuk)[68:]
	bigy := common.BytesToBig(key.PublicKey.Y)
	res := new(big.Int)
	res.Mod(bigy, big.NewInt(2))
	t.Log("res", res.Int64())
	t.Log("first", key.RawPuk[0])
	t.Log("byte2", key.RawPuk[1:32])
	t.Log("bytey", key.RawPuk[32:])
	t.Log("x", x)
	t.Log("y", y)

	t.Log("privlength", len(key.PrivateKey.Key))
}

/**
test_pukX : 03160e12897df4edb61dd812feb96748fbd3ccf4ffe26aa6f6db9540af49c94232
test_priv : 81EB26E941BB5AF16DF116495F90695272AE2CD63D6C4AE1678418BE48230029
test addr : 0x65f5b0b86d53855ea00da874d39feb80264dabfc
*/
func TestGetAddrFromPubX(t *testing.T) {

	//generate address with keypare ,use to compare
	guomiKey, err := GetKeyPareFromHex("81EB26E941BB5AF16DF116495F90695272AE2CD63D6C4AE1678418BE48230029", "03160e12897df4edb61dd812feb96748fbd3ccf4ffe26aa6f6db9540af49c94232")
	if err != nil {
		t.Fatal(err)
	}
	//generate address with part X in public key
	addr, err := GetAddrFromPubX("03160e12897df4edb61dd812feb96748fbd3ccf4ffe26aa6f6db9540af49c94232")
	if err != nil {
		t.Fatal(err)
	}

	//compare whether addresses are matching , generated by different ways
	if addr != guomiKey.GetAddress() {
		t.Fatalf("not match, \n addr from pub  :%v ; \n addr from priv :%v", addr, guomiKey.GetAddress())
	}
	t.Log(addr)
}
